options {
  JAVA_UNICODE_ESCAPE = true;
  TOKEN_FACTORY = "Token";
  IGNORE_CASE = true;
  LOOKAHEAD = 1;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(CCALParser)

import java.io.*;
import java.util.*;

public class CCALParser {
  public static Hashtable ST = new Hashtable();
  public static void main(String [] args) {
    CCALParser parser;
    if (args.length == 0) {
      System.out.println("Reading from standard input...");
      parser = new CCALParser(System.in);
    } else if (args.length == 1) {
      try {
        parser = new CCALParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.printf("File '$s' not found.", args[0]);
        return;
      }
    } else {
      System.out.println("Invalid use of CCALParser. Either use system.in or specify a filename as an arguement.");
      return;
    }
    try {

      SimpleNode root = parser.Prog();

      System.out.println("\n**************** TREE DUMP ****************\n");

      root.dump(" ");

      System.out.println("\n**************** PRINT VISITOR ****************\n");

      PrintVisitor pv = new PrintVisitor();
      root.jjtAccept(pv, null);

      System.out.println("\n**************** SYMBOL TABLE ****************\n");


      SVisitor sv = new SVisitor();
      root.jjtAccept(sv, ST);

    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("CCALParser: Parsing was unsuccessful.");
    }
  }
}

PARSER_END(CCALParser)

TOKEN_MGR_DECLS : {
  static int commentNesting;
}

// Tokens to skip
SKIP : {
" "
| "\n"
| "\t"
| "\r"
| "\f"
| <"//" (~["\n"])*> // Informal comments
| "/*" { commentNesting++; } : FORMAL_COMMENT
}

// Formal comments
<FORMAL_COMMENT> SKIP : {
  "/*" { commentNesting++; }
| "*/" { commentNesting--;
         if (commentNesting == 0) {
           SwitchTo(DEFAULT);
         }}
| <~[]>
}

// Reserved Words
TOKEN : {
  <VAR: "var">
| <CONST: "const">
| <RETURN: "return">
| <INTEGER: "integer">
| <BOOLEAN: "boolean">
| <VOID: "void">
| <MAIN: "main">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <SKIP_: "skip">
| <TRUE: "true">
| <FALSE: "false">
}

// Language Tokens
TOKEN : {
  <COMMA: ",">
  | <SEMIC: ";">
  | <COLON: ":">
  | <ASSIGN: "=">
  | <LBRACE: "{">
  | <RBRACE: "}">
  | <LPAREN: "(">
  | <RPAREN: ")">
  | <PLUS: "+">
  | <MINUS: "-">
  | <TILDE: "~">
  | <OR: "||">
  | <AND: "&&">
  | <EQUALS: "==">
  | <NOT_EQUALS: "!=">
  | <LESS_THAN: "<">
  | <LT_EQUALS: "<=">
  | <GREATER_THAN: ">">
  | <GT_EQUALS: ">=">
}

// Ints and Identifiers
TOKEN : {
  <INT: (<MINUS>)?["1"-"9"](<DIGIT>)* | "0">
| <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|"_")*>
| <#DIGIT: ["0"-"9"]>
| <#LETTER: ["a"-"z", "A"-"Z"]>
}

SimpleNode Prog() #PROG : {}
{
  declList() funcList() main() <EOF> { return jjtThis; }
}

void declList() #void : {}
{
  (decl())*
}

void decl() #void : {}
{
  (varDecl()
  | constDecl())
}

void varDecl() : {}
{
  <VAR> identifier() <COLON> type() <SEMIC>
}

void constDecl() : {}
{
  <CONST> identifier() <COLON> type() <ASSIGN> exp() <SEMIC>
}

void funcList() #void : {}
{
  ( func() )*
}

void func() : {}
{
  type() identifier() <LPAREN> paramList() <RPAREN> funcBlock()
}

void funcBlock() : {}
{
  <LBRACE> declList() stmBlock() (<RETURN> <LPAREN> (exp() | {}) <RPAREN> #funcReturn(1)) <SEMIC> <RBRACE>
}

void type() : {Token t;}
{
  t = <INTEGER> { jjtThis.value = t.image; }
| t = <BOOLEAN> { jjtThis.value = t.image; }
| t = <VOID> { jjtThis.value = t.image; }
}

void paramList() : {}
{
  (param() (<COMMA> param())*)
| {}
}

void param() : {String name;}
{
  name = identifier() <COLON> type()
}

void main() : {}
{
  <MAIN> <LBRACE> declList() stmBlock() <RBRACE>
  | {}
}

void stmBlock() #void : {}
{
  stm() stmBlock()
| {}
}

void stm() #void : {}
{
  identifier() ( assign() #assign(2) | funcCall() #funcCall(2) )
| <LBRACE> stmBlock() <RBRACE>
| ifElseBlock()
| whileBlock()
| stmSkip()
}

void assign() #void : {}
{
  <ASSIGN> exp() <SEMIC>
}

void funcCall() #void : {}
{
  <LPAREN> argList() <RPAREN> <SEMIC>
}

void argList() : {}
{
  identifier() (<COMMA> identifier())*
| {}
}

void stmSkip() : {}
{
  <SKIP_> <SEMIC>
}

void ifElseBlock() #void : {}
{
   ifBlock() elseBlock()
}

void ifBlock() : {}
{
  <IF> cond() <LBRACE> stmBlock() <RBRACE>
}

void elseBlock() : {}
{
  <ELSE> <LBRACE> stmBlock() <RBRACE>
}

void whileBlock() : {}
{
  <WHILE> cond() <LBRACE> stmBlock() <RBRACE>
}

void exp() #void : {}
{
  frag() recurExp()
}

void frag() #void : {}
{
  <LPAREN> exp() <RPAREN> #parenExp(1)
| identifier() (<LPAREN> argList() <RPAREN> | {})
| <MINUS> identifier() #negIdentifier(1)
| num()
| bool()
}

void bool() : {Token t;}
{
  t = <TRUE> { jjtThis.value = t.image; }
| t = <FALSE> { jjtThis.value = t.image; }
}

void recurExp() #void : {}
{
  (binOp() exp() #binOpExp(3)) recurExp()
| {}
}

void binOp() : {Token t;}
{
  t = <PLUS> { jjtThis.value = t.image; }
| t = <MINUS> { jjtThis.value = t.image; }
}

void cond() #void : {}
{
  simpleCond() recurCond()
}

void simpleCond() #void : {}
{
  <LPAREN> cond() <RPAREN> #parenCond(>1) // TODO fix parenCond()
| <TILDE> cond() #notCond(1)
| exp() compOp() exp() #operatorCond(3)
}

void recurCond() #void : {}
{
  (andOrOp() cond() #andOrCond(3)) recurCond() | {}
}

void andOrOp() : {Token t;}
{
  t = <OR> { jjtThis.value = t.image; }
| t = <AND> { jjtThis.value = t.image; }
}

void compOp() : {Token t;}
{
  t = <EQUALS> { jjtThis.value = t.image; }
| t = <NOT_EQUALS> { jjtThis.value = t.image; }
| t = <LESS_THAN> { jjtThis.value = t.image; }
| t = <LT_EQUALS> { jjtThis.value = t.image; }
| t = <GREATER_THAN> { jjtThis.value = t.image; }
| t = <GT_EQUALS> { jjtThis.value = t.image; }
}

void num() : {Token t;}
{
  t = <INT> { jjtThis.value = t.image; }
}

String identifier() : {Token t;}
{
  t = <IDENTIFIER> { jjtThis.value = t.image; return t.image; }
}
