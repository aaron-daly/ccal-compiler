/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CCALParser.jj */
/*@egen*//* CA4003 - ASSIGNMENT 1 - LEXICAL AND SYNTAX ANALYSER FOR THE CCAL LANGUAGE */

/*** STUDENT DETAILS ***
 Aaron Daly
 13376916
 aaron.daly42@mail.dcu.ie
************************/

/* I declare that this is my own work, and that I am aware of the consequences
   of plagerism in DCU. */

options {
  JAVA_UNICODE_ESCAPE = true;
  TOKEN_FACTORY = "Token";
  IGNORE_CASE = true;
  LOOKAHEAD = 1;
               
                 
}

PARSER_BEGIN(CCALParser)

import java.io.*;
import java.util.*;

public class CCALParser/*@bgen(jjtree)*/implements CCALParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCCALParserState jjtree = new JJTCCALParserState();

/*@egen*/
  public static Hashtable ST = new Hashtable();
  public static void main(String [] args) {
    CCALParser parser;
    if (args.length == 0) {
      System.out.println("Reading from standard input...");
      parser = new CCALParser(System.in);
    } else if (args.length == 1) {
      try {
        parser = new CCALParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.printf("File '$s' not found.", args[0]);
        return;
      }
    } else {
      System.out.println("Invalid use of CCALParser. Either use system.in or specify a filename as an arguement.");
      return;
    }
    try {

      SimpleNode root = parser.Prog();

      System.out.println("\n**************** TREE DUMP ****************\n");

      root.dump(" ");

      System.out.println("\n**************** PRINT VISITOR ****************\n");

      PrintVisitor pv = new PrintVisitor();
      root.jjtAccept(pv, null);

      System.out.println("\n**************** SYMBOL TABLE ****************\n");


      SVisitor sv = new SVisitor();
      root.jjtAccept(sv, ST);

    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("CCALParser: Parsing was unsuccessful.");
    }
  }
}

PARSER_END(CCALParser)

TOKEN_MGR_DECLS : {
  static int commentNesting;
}

// Tokens to skip
SKIP : {
" "
| "\n"
| "\t"
| "\r"
| "\f"
| <"//" (~["\n"])*> // Informal comments
| "/*" { commentNesting++; } : FORMAL_COMMENT
}

// Formal comments
<FORMAL_COMMENT> SKIP : {
  "/*" { commentNesting++; }
| "*/" { commentNesting--;
         if (commentNesting == 0) {
           SwitchTo(DEFAULT);
         }}
| <~[]>
}

// Reserved Words
TOKEN : {
  <VAR: "var">
| <CONST: "const">
| <RETURN: "return">
| <INTEGER: "integer">
| <BOOLEAN: "boolean">
| <VOID: "void">
| <MAIN: "main">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <SKIP_: "skip">
| <TRUE: "true">
| <FALSE: "false">
}

// Language Tokens
TOKEN : {
  <COMMA: ",">
  | <SEMIC: ";">
  | <COLON: ":">
  | <ASSIGN: "=">
  | <LBRACE: "{">
  | <RBRACE: "}">
  | <LPAREN: "(">
  | <RPAREN: ")">
  | <PLUS: "+">
  | <MINUS: "-">
  | <TILDE: "~">
  | <OR: "||">
  | <AND: "&&">
  | <EQUALS: "==">
  | <NOT_EQUALS: "!=">
  | <LESS_THAN: "<">
  | <LT_EQUALS: "<=">
  | <GREATER_THAN: ">">
  | <GT_EQUALS: ">=">
}

// Ints and Identifiers
TOKEN : {
  <INT: (<MINUS>)?["1"-"9"](<DIGIT>)* | "0">
| <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|"_")*>
| <#DIGIT: ["0"-"9"]>
| <#LETTER: ["a"-"z", "A"-"Z"]>
}

SimpleNode Prog()       : {/*@bgen(jjtree) PROG */
  ASTPROG jjtn000 = new ASTPROG(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROG */
  try {
/*@egen*/
  declList() funcList() main() <EOF>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declList()       : {}
{
  (decl())*
}

void decl()       : {}
{
  (varDecl()
  | constDecl())
}

void varDecl() : {/*@bgen(jjtree) varDecl */
  ASTvarDecl jjtn000 = new ASTvarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) varDecl */
  try {
/*@egen*/
  <VAR> identifier() <COLON> type() <SEMIC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void constDecl() : {/*@bgen(jjtree) constDecl */
  ASTconstDecl jjtn000 = new ASTconstDecl(JJTCONSTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constDecl */
  try {
/*@egen*/
  <CONST> identifier() <COLON> type() <ASSIGN> exp() <SEMIC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void funcList()       : {}
{
  ( func() )*
}

void func() : {/*@bgen(jjtree) func */
  ASTfunc jjtn000 = new ASTfunc(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) func */
  try {
/*@egen*/
  type() identifier() <LPAREN> paramList() <RPAREN> funcBlock()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void funcBlock() : {/*@bgen(jjtree) funcBlock */
  ASTfuncBlock jjtn000 = new ASTfuncBlock(JJTFUNCBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) funcBlock */
  try {
/*@egen*/
  <LBRACE> declList() stmBlock() (<RETURN> <LPAREN> (exp() | {})/*@bgen(jjtree) #funcReturn( 1) */
                                                                 {
                                                                   ASTfuncReturn jjtn001 = new ASTfuncReturn(JJTFUNCRETURN);
                                                                   boolean jjtc001 = true;
                                                                   jjtree.openNodeScope(jjtn001);
                                                                 }
                                                                 try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                                                                 } finally {
                                                                   if (jjtc001) {
                                                                     jjtree.closeNodeScope(jjtn001,  1);
                                                                   }
                                                                 }
/*@egen*/               ) <SEMIC> <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void type() : {/*@bgen(jjtree) type */
               ASTtype jjtn000 = new ASTtype(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) type */
  try {
/*@egen*/
  t = <INTEGER>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.value = t.image; }
| t = <BOOLEAN>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.value = t.image; }
| t = <VOID>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void paramList() : {/*@bgen(jjtree) paramList */
  ASTparamList jjtn000 = new ASTparamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) paramList */
  try {
/*@egen*/
  (param() (<COMMA> param())*)
|/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void param() : {/*@bgen(jjtree) param */
                ASTparam jjtn000 = new ASTparam(JJTPARAM);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/String name;}
{/*@bgen(jjtree) param */
  try {
/*@egen*/
  name = identifier() <COLON> type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void main() : {/*@bgen(jjtree) main */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) main */
  try {
/*@egen*/
  <MAIN> <LBRACE> declList() stmBlock() <RBRACE>
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void stmBlock()       : {}
{
  stm() stmBlock()
| {}
}

void stm()       : {}
{
  identifier() (/*@bgen(jjtree) #assign( 2) */
                 {
                   ASTassign jjtn001 = new ASTassign(JJTASSIGN);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ assign()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
                 }
/*@egen*/            |/*@bgen(jjtree) #funcCall( 2) */
                                       {
                                         ASTfuncCall jjtn002 = new ASTfuncCall(JJTFUNCCALL);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                       }
                                       try {
/*@egen*/ funcCall()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte002) {
                                         if (jjtc002) {
                                           jjtree.clearNodeScope(jjtn002);
                                           jjtc002 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte002 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte002;
                                         }
                                         if (jjte002 instanceof ParseException) {
                                           throw (ParseException)jjte002;
                                         }
                                         throw (Error)jjte002;
                                       } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                         }
                                       }
/*@egen*/              )
| <LBRACE> stmBlock() <RBRACE>
| ifElseBlock()
| whileBlock()
| stmSkip()
}

void assign()       : {}
{
  <ASSIGN> exp() <SEMIC>
}

void funcCall()       : {}
{
  <LPAREN> argList() <RPAREN> <SEMIC>
}

void argList() : {/*@bgen(jjtree) argList */
  ASTargList jjtn000 = new ASTargList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) argList */
  try {
/*@egen*/
  identifier() (<COMMA> identifier())*
|/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void stmSkip() : {/*@bgen(jjtree) stmSkip */
  ASTstmSkip jjtn000 = new ASTstmSkip(JJTSTMSKIP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) stmSkip */
  try {
/*@egen*/
  <SKIP_> <SEMIC>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ifElseBlock()       : {}
{
   ifBlock() elseBlock()
}

void ifBlock() : {/*@bgen(jjtree) ifBlock */
  ASTifBlock jjtn000 = new ASTifBlock(JJTIFBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ifBlock */
  try {
/*@egen*/
  <IF> cond() <LBRACE> stmBlock() <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void elseBlock() : {/*@bgen(jjtree) elseBlock */
  ASTelseBlock jjtn000 = new ASTelseBlock(JJTELSEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) elseBlock */
  try {
/*@egen*/
  <ELSE> <LBRACE> stmBlock() <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void whileBlock() : {/*@bgen(jjtree) whileBlock */
  ASTwhileBlock jjtn000 = new ASTwhileBlock(JJTWHILEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) whileBlock */
  try {
/*@egen*/
  <WHILE> cond() <LBRACE> stmBlock() <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void exp()       : {}
{
  frag() recurExp()
}

void frag()       : {}
{
  <LPAREN> exp()/*@bgen(jjtree) #parenExp( 1) */
                 {
                   ASTparenExp jjtn001 = new ASTparenExp(JJTPARENEXP);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  1);
                   }
                 }
/*@egen*/             
| identifier() (<LPAREN> argList() <RPAREN> | {})
| <MINUS>/*@bgen(jjtree) #negIdentifier( 1) */
          {
            ASTnegIdentifier jjtn002 = new ASTnegIdentifier(JJTNEGIDENTIFIER);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ identifier()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  1);
            }
          }
/*@egen*/                  
| num()
| bool()
}

void bool() : {/*@bgen(jjtree) bool */
               ASTbool jjtn000 = new ASTbool(JJTBOOL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) bool */
  try {
/*@egen*/
  t = <TRUE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.value = t.image; }
| t = <FALSE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void recurExp()       : {}
{
  (binOp()/*@bgen(jjtree) #binOpExp( 3) */
           {
             ASTbinOpExp jjtn001 = new ASTbinOpExp(JJTBINOPEXP);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ exp()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  3);
             }
           }
/*@egen*/             ) recurExp()
| {}
}

void binOp() : {/*@bgen(jjtree) binOp */
                ASTbinOp jjtn000 = new ASTbinOp(JJTBINOP);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) binOp */
  try {
/*@egen*/
  t = <PLUS>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.value = t.image; }
| t = <MINUS>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void cond()       : {}
{
  simpleCond() recurCond()
}

void simpleCond()       : {}
{
  <LPAREN> cond()/*@bgen(jjtree) #parenCond(> 1) */
                  {
                    ASTparenCond jjtn001 = new ASTparenCond(JJTPARENCOND);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                    }
                  }
/*@egen*/                // TODO fix parenCond()
| <TILDE>/*@bgen(jjtree) #notCond( 1) */
          {
            ASTnotCond jjtn002 = new ASTnotCond(JJTNOTCOND);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ cond()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  1);
            }
          }
/*@egen*/            
| exp() compOp()/*@bgen(jjtree) #operatorCond( 3) */
                 {
                   ASToperatorCond jjtn003 = new ASToperatorCond(JJTOPERATORCOND);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*/ exp()/*@bgen(jjtree)*/
                 } catch (Throwable jjte003) {
                   if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     throw (RuntimeException)jjte003;
                   }
                   if (jjte003 instanceof ParseException) {
                     throw (ParseException)jjte003;
                   }
                   throw (Error)jjte003;
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003,  3);
                   }
                 }
/*@egen*/                 
}

void recurCond()       : {}
{
  (andOrOp()/*@bgen(jjtree) #andOrCond( 3) */
             {
               ASTandOrCond jjtn001 = new ASTandOrCond(JJTANDORCOND);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ cond()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  3);
               }
             }
/*@egen*/              ) recurCond() | {}
}

void andOrOp() : {/*@bgen(jjtree) andOrOp */
                  ASTandOrOp jjtn000 = new ASTandOrOp(JJTANDOROP);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) andOrOp */
  try {
/*@egen*/
  t = <OR>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.value = t.image; }
| t = <AND>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void compOp() : {/*@bgen(jjtree) compOp */
                 ASTcompOp jjtn000 = new ASTcompOp(JJTCOMPOP);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) compOp */
  try {
/*@egen*/
  t = <EQUALS>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.value = t.image; }
| t = <NOT_EQUALS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.value = t.image; }
| t = <LESS_THAN>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.value = t.image; }
| t = <LT_EQUALS>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.value = t.image; }
| t = <GREATER_THAN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.value = t.image; }
| t = <GT_EQUALS>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void num() : {/*@bgen(jjtree) num */
              ASTnum jjtn000 = new ASTnum(JJTNUM);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) num */
  try {
/*@egen*/
  t = <INT>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String identifier() : {/*@bgen(jjtree) identifier */
                       ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
  try {
/*@egen*/
  t = <IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.value = t.image; return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
