/* CA4003 - ASSIGNMENT 1 - LEXICAL AND SYNTAX ANALYSER FOR THE CCAL LANGUAGE */

/*** STUDENT DETAILS ***
 Aaron Daly
 13376916
 aaron.daly42@mail.dcu.ie
************************/

/* I declare that this is my own work, and that I am aware of the consequences
   of plagerism in DCU. */

options {
  JAVA_UNICODE_ESCAPE = true;
  TOKEN_FACTORY = "Token";
  IGNORE_CASE = true;
  LOOKAHEAD = 1;
}

PARSER_BEGIN(CCALParser)

  public class CCALParser {
    public static void main(String [] args) {
      CCALParser parser;
      if (args.length == 0) {
        System.out.println("Reading from standard input...");
        parser = new CCALParser(System.in);
      } else if (args.length == 1) {
        try {
          parser = new CCALParser(new java.io.FileInputStream(args[0]));
        } catch (java.io.FileNotFoundException e) {
          System.out.printf("File '$s' not found.", args[0]);
          return;
        }
      } else {
        System.out.println("Invalid use of CCALParser. Either use system.in or specify a filename as an arguement.");
        return;
      }
      try {
        parser.Prog();
        System.out.println("CCALParser: Successfully parsed the CCAL program.");
      } catch (ParseException e) {
        System.out.println(e.getMessage());
        System.out.println("CCALParser: Parsing was unsuccessful.");
      }
    }
  }

PARSER_END(CCALParser)

TOKEN_MGR_DECLS : {
  static int commentNesting;
}

// Tokens to skip
SKIP : {
" "
| "\n"
| "\t"
| "\r"
| "\f"
| <"//" (~["\n"])*> // Informal comments
| "/*" { commentNesting++; } : FORMAL_COMMENT
}

// Formal comments
<FORMAL_COMMENT> SKIP : {
  "/*" { commentNesting++; }
| "*/" { commentNesting--;
         if (commentNesting == 0) {
           SwitchTo(DEFAULT);
         }}
| <~[]>
}

// Reserved Words
TOKEN : {
  <VAR: "var">
| <CONST: "const">
| <RETURN: "return">
| <INTEGER: "integer">
| <BOOLEAN: "boolean">
| <VOID: "void">
| <MAIN: "main">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <SKIP_: "skip">
| <TRUE: "true">
| <FALSE: "false">
}

// Language Tokens
TOKEN : {
  <COMMA: ",">
  | <SEMIC: ";">
  | <COLON: ":">
  | <ASSIGN: "=">
  | <LBRACE: "{">
  | <RBRACE: "}">
  | <LPAREN: "(">
  | <RPAREN: ")">
  | <PLUS: "+">
  | <MINUS: "-">
  | <TILDE: "~">
  | <OR: "||">
  | <AND: "&&">
  | <EQUALS: "==">
  | <NOT_EQUALS: "!=">
  | <LESS_THAN: "<">
  | <LT_EQUALS: "<=">
  | <GREATER_THAN: ">">
  | <GT_EQUALS: ">=">
}

// Integers and Identifiers
TOKEN : {
  <NUM: (<DIGIT>)+>
| <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|<UNDERSCORE>)*>
| <#DIGIT: ["0"-"9"]>
| <#LETTER: ["a"-"z", "A"-"Z"]>
| <#UNDERSCORE: "_">
}

void Prog() : {}
{
  declList() funcList() main() <EOF>
}

void declList() : {}
{
  (decl() [<SEMIC> declList()])
| {}
}

void decl() : {}
{
  varDecl()
| constDecl()
}

void varDecl() : {}
{
  <VAR> <IDENTIFIER> <COLON> type()
}

void constDecl() : {}
{
  <CONST> <IDENTIFIER> <COLON> type() <ASSIGN> exp()
}

void funcList() : {}
{
  func() funcList()
  | {}
}

void func() : {}
{
  type() <IDENTIFIER> <LPAREN> paramList() <RPAREN>
   <LBRACE> declList() stmBlock() <RETURN> <LPAREN> (exp() | {}) <RPAREN> <SEMIC> <RBRACE>
}

void type() : {}
{
  <INTEGER>
| <BOOLEAN>
| <VOID>
}

void paramList() : {}
{
  nempParamList()
| {}
}

void nempParamList() : {}
{
  <IDENTIFIER> <COLON> type() (<COMMA> nempParamList() | {})
}

void main() : {}
{
  <MAIN> <LBRACE> declList() stmBlock() <RBRACE>
  | {}
}

void stmBlock() : {}
{
  stm() stmBlock()
| {}
}

void stm() : {}
{
  <IDENTIFIER> (<ASSIGN> exp() <SEMIC> | <LPAREN> argList() <RPAREN>)
| <LBRACE> stmBlock() <RBRACE>
| <IF> cond() <LBRACE> stmBlock() <RBRACE> <ELSE> <LBRACE> stmBlock() <RBRACE>
| <WHILE> cond() <LBRACE> stmBlock() <RBRACE>
| <SKIP_> <SEMIC>
}

void exp() : {}
{
  frag() recurExp()
}

void frag() : {}
{
  <LPAREN> exp() <RPAREN>
| <IDENTIFIER> (<LPAREN> argList() <RPAREN> | {})
| <MINUS> <IDENTIFIER>
| <NUM>
| <TRUE>
| <FALSE>
}

void recurExp() : {}
{
  (binOp() exp()) recurExp()
| {}
}

void binOp() : {}
{
  <PLUS>
| <MINUS>
}

void cond() : {}
{
  simpleCond() recurCond()
}

void simpleCond() : {}
{
  <TILDE> cond()
| LOOKAHEAD(2) <LPAREN> cond() <RPAREN> //TODO REMOVE LOOKAHEAD
| exp() compOp() exp()
}

void recurCond() : {}
{
  (<OR> | <AND>) cond() recurCond() | {}
}

void compOp() : {}
{
  <EQUALS>
| <NOT_EQUALS>
| <LESS_THAN>
| <LT_EQUALS>
| <GREATER_THAN>
| <GT_EQUALS>
}

void argList() : {}
{
  nempArgList()
| {}
}

void nempArgList() : {}
{
  <IDENTIFIER> (<COMMA> nempArgList() | {})
}
